##Huffman Coding##
class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ""

def print_nodes(node, val=""):
    new_val = val + str(node.huff)
    if node.left:
        print_nodes(node.left, new_val)
    if node.right:
        print_nodes(node.right, new_val)
    if not node.left and not node.right:
        print(f"{node.symbol} -> {new_val}")

def huffman_encoding(chars, freq):
    nodes = [Node(freq[i], chars[i]) for i in range(len(chars))]
    while len(nodes) > 1:
        nodes = sorted(nodes, key=lambda x: x.freq)
        left, right = nodes[0], nodes[1]
        left.huff, right.huff = '0', '1'
        nodes = nodes[2:] + [Node(left.freq + right.freq, left.symbol + right.symbol, left, right)]
    print_nodes(nodes[0])

# Example usage
huffman_encoding(["a", "b", "c", "d", "e", "f"], [21, 1, 7, 4, 2, 19])
