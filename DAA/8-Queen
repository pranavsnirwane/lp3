class NQBacktracking: 
    def __init__(self, x, y): 
        self.ld, self.rd, self.cl = [0]*30, [0]*30, [0]*30
        self.x, self.y = x, y 
    
    def printSolution(self, board): 
        print(f"N Queen Backtracking Solution:\nInitial position: ({self.x}, {self.y})\n")
        for line in board: print(" ".join(map(str, line)))
    
    def solveNQUtil(self, board, col): 
        N = len(board)
        if col == N: return True
        if col == self.y: return self.solveNQUtil(board, col + 1)
        
        for i in range(N):
            if i == self.x: continue
            if not (self.ld[i - col + N - 1] or self.rd[i + col] or self.cl[i]):
                board[i][col] = 1
                self.ld[i - col + N - 1] = self.rd[i + col] = self.cl[i] = 1
                if self.solveNQUtil(board, col + 1): return True
                board[i][col] = self.ld[i - col + N - 1] = self.rd[i + col] = self.cl[i] = 0
        return False
    
    def solveNQ(self):
        N = 4  # Size of the board
        board = [[0]*N for _ in range(N)]
        board[self.x][self.y] = 1
        self.ld[self.x - self.y + N - 1] = self.rd[self.x + self.y] = self.cl[self.x] = 1
        if not self.solveNQUtil(board, 0):
            print("Solution does not exist")
            return False
        self.printSolution(board)
        return True

if __name__ == "__main__": 
    NQBt = NQBacktracking(1, 3) 
    NQBt.solveNQ()
